<22/02/02>

1. 윷을 던져 칸만큼 이동 구현
2. 특정 구간에 멈췄을시, 대각선으로 이동 구현

- 보완할 점

1. 좌 대각선으로 이동하다 중앙을 지나가면, 가는도중임에도 불구하고 우 대각선으로 방향을 틀음 (02.03 clear)
2. 도착점에 도착시 멈추기(끝내기) (정확히는 도착점에서 이동의 여유가 남아있으면 끝내기, 02.03 clear)
3. 백도 구현하기 (02.03 clear)
4. 윷을 던질때 윷 하나당 앞면, 뒷면의 확률을 구현하여서 결과를 내보기 (02.03 clear)


<22/02/03>

1. assertion을 활용하여 테스트 코드를 만들었다. 출력으로 확인하는것이 아닌 코드로 확인하게 만들었다.

2. 왼 대각선으로 내려가다가 말의 이동이 끝나기전에 오른 대각선으로 이동하는 문제를 해결하였다.
   오른 대각선으로 내려가는 경우는 말이 다 이동하고 멈췄을때이므로(독자적인 움직임), 새로운 for문안에 넣어주었다.

3. 윷의 값을 단순히 백도~모 중의 랜덤값이 아닌, 4개의 윷 각각을 굴려서 결과가 나오게 바꾸었다. 
   (Math.random() 메소드를 사용하여 0.5 밑으로는 엎어짐, 위로는 뒤집어짐)

4. ChangeMal이 실행되면 코드마지막에 mal의 boolean 변수 start를 true로 바꾸어 말이 판위에 올라와 이동했다는걸 분류했다.

5. mal class에 beforelocation 변수를 만들어 백도가 나오면 이전 위치로 되돌아 갈 수 있게 만들었다.   

6. beforelocation으로 start의 유무도 알 수 있기에 start를 삭제하였다.

7. 도착점에 도착했을때 count가 남아있으면 (이동할 수 있는 여유) 도착으로 치기로 했다. 
  이때 시작도 도착점에서 하기에 예외처리를 위하여 beforelocation이 null이 아닐시에만 도착으로 취급했다. 

- 보완할 점

1-1 . assertion으로 테스트 코드를 작성중 x,y 좌표를 검사하는데 isEqualto로 객체 비교가 안되었다.
      따라서 x값, y값을 각자 추출하여 작성하여 두줄로 작성이 되었다 -> 지저분 -> 클래스의 멤버내용도 한번에 비교할 순 없을까?

1-2. assertion으로 만든 테스트코드지만 너무 복잡하다, 일일히 좌표를 적지 않고 테스트를 진행할 순 없을까?

2. 처음에 백도가 나왔을시에 start를 true로 바꾸지않게 예외처리가 필요하다.

3. 말이동의 로직은 만들었으나 깔끔하지 않다 -> 직관적이고 일반화 어떻게 해야하는가?

- 추가할 점

1. 1명의 플레이어 내에서 2개 이상의 말을 컨트롤 하기
2. 말의 업기 기능
3. 여러명의 플레이어 플레이
4. 상대 플레이어의 말을 잡아보기

<22/02/04>

1. player 객체에 존재하던 mal을 없애고 ArrayList<Mal>을 추가해줌, 
  또한 player 생성자에 말의 개수를 입력받음으로써, 말의 개수를 가변적으로 생성해줌

2. 기존 test코드 삭제

3. WholeGame이라는 객체를 만들고 해당 객체가 게임을 시작함.

- 추가할 점

1. 게임 로직(진행)을 프로토 타입으로 만들어보기.
2. 이후에 업기 및 잡기 기능을 추가해보기.


<22/02/05>

1. 플레이어 수와 말의 개수를 입력받고 진행하는 StartGame 메소드를 WholeGame 객체안에 생성하고 로직을 만듬.

<22/02/06>

1. 업기 기능을 추가하였음.
2. 업혀있는 말은 int형 변수 group이라는 상태로 구분되며, 같은 숫자를 지니고있으면 업혀있는것이다.
3. 특정말이 이동하기전에 해당 플레이어의 다른말과 업혀있는지(동행하는지) 검사한다.
4. 2개 이상의 말이 해당 그룹에 해당하면 2개의 말 모두 이동한다.
5. 이동이 끝나면 그 위치에 해당플레이어의 다른 말이 있는지 검사하고 있다면 업는다. (PiggyBack 메소드)
6. static 변수로 새로 업을때마다 그룹값을 1씩 더해주고 할당해준다, 이로써 다른 플레이어 또는 다른 그룹과 엮이지 않게 구분한다.

7. 말이 도착할때 기존에는 업기 기능이 없었기에 플레이어의 말을 -1씩 해주는 방법이었는데, 
   업기기능을 추가한 후에는 얼마만큼이 업혀있는지 검사후에 그 수 만큼 제외하는 로직으로 변경하였다.

8. WholeGameLogicTestManual 이라는 Test를 만들어서 기존의 랜덤 윷 값이 아닌
    원하는 윷 값을 입력받을 수 있는 게임 테스트를 만들었다.


- 추가할 점

잡기 기능!
 · 이동후에 해당 위치에 다른 플레이어의 말이 존재하는지 확인한다.
 · 잡힌 말들을 그룹도 초기화되고 beforelocation도 null로 초기화 하고 출발하지 않은것으로 치부한다.
 · 도착은 하지 않았기에 해당 플레이어의 말을 늘릴필요는 없다.

<22/2/10>

1. 잡기기능을 추가하였다.
2. 이동후에 해당 로직을 실행하도록 설계
3. 이동후 해당 플레이어가 아닌 다른 플레이어의 말이 이동후 위치에 존재하면 해당말을 잡는다.
4. 잡는다 -> 위치를 최초위치로 되돌리고, beforlocation을 null로 초기화, 그룹또한 0으로 초기화한다.

5. 코드의 리팩토링을 좀 진행하였다. 리팩토링은 익숙하지 않았는데,  https://zzang9ha.tistory.com/307 블로그를 참고하여 진행하였다.
   처음이다보니 모든걸 해내려기보다는 메소드를 최대한 분리하는 쪽으로 진행해보았다.
   예를 들어 말이 필드에 존재한다는 분류를 beforelocation != null && !is.Arrive() 라는 식으로 기존코드안에 작성하였는데,
   이러한 내용을 true 혹은 false로 반환하는 isExistMalInField 메소드를 만듬으로써, 가독성도 높이며 메소드의 역할도 나누었다.

- 추후 진행할 점

Move클래스와 말을 이동하는 메소드들이 너무 복잡하다. 조금 더 가독성좋게 리팩토링해보자.


<22/2/11>

- 꾸준히 리팩토링 진행중

-보안할 점

1. playerchangemal 메소드 실행에 있어서 players 리스트와, player의 정보를 받는것은 좋지않다.
   player에 속해있는 메소드로 말을 체인지하는데 본인의 정보를 넘기는건 더욱 이상. 
   -> players의 리스트만 따로 받아서 로직을 실행할때 적용해야함.

2. t_location이라는 temporal location 객체를 만들어서 임의로 값을 저장해두는데,
   t_location이 아니라 그냥 바로바로 mal의 기본 location에 저장하면 되지않는가? 
   t_location의 필요성?


<22/2/13>

1. t_location의 임시 location을 모두 삭제해서 코드를 조금 더 깔끔하게 만듬,
  초기작업 과정에서 임의로 만들었던 객체인데 정리하면서 보니 필요없을듯

2. 이외에도 자잘한 코드 리팩토링 진행

<22/2/15>

1. 아직도 코드가 많이 지저분하고 직관적이지 못하지만, 언제까지나 할 순 없기에 gui를 공부하였다.
2. java에서 제공해주는 swing을 사용하기로 하였다.
3. 간단한 프레임이나 패널, 버튼등의 사용법을 조금 익혔다. 아직 원리를 제대로 이해하지 못해서 개념에 대해 더욱 공부할 필요가 있겠다.
4. 어떻게든 서칭해보면서 플레이어 수와 말의 수를 입력받으면 새로운 화면(게임화면이 될 화면)으로 전환되는데까지 만들어보았다.

- 보완할 점

1. 현재는 gui의 껍데기만 만들었기에 기존 로직과 합치는 방법을 알아봐야겠다. (플레이어나 말의 수가 전달되는것 등..)
2. swing을 이루는 패널이나 프레임에 대해 공부하고, event에 대해서도 조금 더 공부하고, 내부적으로 어떻게 실행되는지 알 필요가 있어보인다. 

<22/2/18>

1. swing을 이용하여 플레이화면의 gui를 더 만들었다.
2.paintcomponent와, Graphics를 활용하여 도형을 그리고, 보드판의 초기형태를 만들었다. 좌표설정이 힘들었다.
3. 또한 4P까지의 각기다른 말 색깔을 표현하였고, 윷을 던지는 버튼과, 게임 전반적인 상황을 알려주는 상태창을 하나 만들었다.

- 보완할 점

1. 우선 백엔드와 합치기전에 기본적인 GUI를 완성하자.
2. 윷,모를 던졌을때 윷을 한 번 더 던지는 로직, 상대방 말을 잡았을때 한 번 더 던지는 로직(윷,모로 잡았을때 제외)을 추가해야한다.

<22/2/19>
1. 말 이동 메소드에 반환값을 추가하여서, 상대말을 잡으면 true를 반환하게 수정하였다.
2. 상대 말을 잡았을때는 윷을 한 번 더 던지게 수정하였다. 이때, 윷이나 모로 잡았을경우에는 한번더 던지지 않는다. (잡기보너스 + 윷/모 보너스가 중첩되서 2번 더 던지는 경우를 방지)
3. 윷이나 모를 던졌을때 윷을 한 번 더 던지게 수정하였다.
4. 일단 백엔드, 로직자체는 희망하는 수준까지는 얼추 완성함.

- 보완할 점
1. 윷이나 모를 던지고 무조건 말을 이동하고 다시 던져야하는 시스템임 -> 이동횟수를 적립한다음 한번에 이동이 불가능 -> 일단은 보류, 추후 가능하면 수정하기로

<22/2/20>
1. 로직과 GUI를 합병하기 위한 작업 들어감, 상당히 머리 아프긴한데 기존에 짜놓은 로직들을 참고하고,
   합쳐가면서 만들어가볼 예정. 

<22/2/21>

1. rolling 을 누르면 결과값이 상태창에 나오도록 만듬
2. 말 버튼을 추가하였음.
3. 말을 프론트 좌표에 그릴수 있어야하므로, 백엔드 좌푤르 받아오면 매칭될 수 있게 노가다 메소드를 하나 작성함
4. 말의 버튼을 누르면 몇번 말을 눌렀는지 상태창에 뜸.
5. 또한 백엔드에서는 말의 이동또한 이루어짐.

- 보완할 점
1. 말의 이동이 끝나면 필드에 있는 모든 말을 새로 그릴예정인데, 잘 되지 않음
2. 기존의 보드판은 내버려두고 말만 새로 그리고 싶은데 프론트 구현에 어려움을 겪는중.
3. 말 조회는 모든 플레이어의 말 위치를 확인하고 플레이어마다 색깔이 다르게 말을 그리면 됨.

<22/2/22>

1. 기존의 panal형식에서 paint() method로 그리는것을 변경하였다.
2. 그리고 말을 클릭하면 repaint()를 호출하게 했고, 이로인해 말의 이동을 그릴 수 있었다.
3. 현재 플레이어가 변경이 안되어서 한 플레이어의 말만 계속 이동이 되고 있는데, 이 부분만 해결하면 얼추 형태가 나올 거 같다!

<22/2/25>

1. 플레이어가 안바뀌는건 메소드를 실행할때마다 플레이어를 초기화 안해주어서 그랬다.
  action_malclick의 클래스의 변수선언부가 아닌, 메소드쪽으로 선언을 옮겼더니 해결되었다.

2. 말을 굴리고 보면 현재플레이어가 누구인지 헷갈렸기때문에 현재 누가 플레이하는지 상태창을 하나 더 만들었다.

3. drawchars를 활용하여서 현재 말이 몇번 말인지 알려주게 만들었다. 그리고 업었을때 (같은 그룹일때) 를 검사해서 어떤말들이 겹쳐있는지 표시하게 만들었다.

4. 백도일때 필드에 없는 말을 클릭하면 해당말은 필드에 없다는 예외상태 메세지를 추가했다.

-보완할 점

1. 윷 또는 모를 던졌을때 한 번 더 던지기 구현 

2. 예외 상황이 생겼을때 예외처리를 제대로 해주어야할 필요가 있다고 생각 -> 계속 윷을 굴리거나, 말을 계속 클릭하거나 , 이런 상황에 클릭을 해도 반응이 없게 하거나, 
메시지를 보내서 인식할 수 있게 처리하자. 또한 메시지로만 보내지 말고 로직으로서도 확실히 방지를 할 필요가 있다고 생각함.

3. 승자가 나오면 , 승자를 알려주고 게임을 끝낸다. -> 다시하기 버튼?

4. 도에서 백도가 나오면 뒤로 안감(30,30)으로 안감, 30 30에서도 백도가 안됨
->백도 로직에 오류가 많음

5. 백도로 잡고, 백도가 또 뜨면 이동이 안됨 -> beforelocation의 문제?
->백도 로직을 새로 만들어야함

6. 백도후에 윷을 던졌더니 오류가남

<22/2/26>

1. 윷 또는 모를 던지거나 잡았을때 한 번 더 윷을 굴리게 구현
2. 말을 업는 그룹설정에 조금 수정이 들어갔음, 예로 , 도 -> 백도로 이동한 경우 출발하지 않은 말이 업히는 경우가 생김, 그 상태로
  백도로 들어온 말을 이동하면 같은그룹으로 설정되어있기에 2개의 말이 한번에 움직이는 경우가 발생했음
  그래서 그룹을 설정하는 조건부에 출발하지 않은 말들의 beforelocation이 null이라면 그룹에추가하지 않는 로직을 설치함
  기존에는 이동하는 말의 beforelocation으로만 판단했는데, 그 외의(출발안한 말들) 말들도 조건 검사를 해주게 바꾸었음.
  또한 말이 도착하면 30,30에 멈춰있는데 또 다른 말이 들어올시 같은 그룹으로 묶이게 되었음. 이러한 경우를 방지해서
  말이 도착해있는 상태일때도 그룹에 들어가지 않게 로직을 바꿈. 그룹에 있는 개수만큼 말의 개수를 깎았기때문에
  말이 한개가 들어왔는데 들어옴과 동시에 기존에 들어온 말과 그룹으로 묶이며 필요 이상의 개수가 깎이는 일이 있었기 때문

3. 말이 도착할시 플레이어 옆의 말개수가 줄어들게 로직을 구성함.

4. 말이 모두 들어가면 우승자를 상태창에 띄운다, 그리고 rolling버튼을 클릭 못하게 enable(false)로 설정해주었다.

5. 또한 게임이 끝나게 되면 우측하단에 다시하기 버튼을 생성시켰으며, 누를 경우에는 플레이어와 말을 고르는 화면부터 시작하게 만들었다.

6. 플레이어 말의 개수 옆에 어떤말들이 남아있는지 번호로 표시하게 했다. 말이 들어갈시 없어진다.

7. 백도로 갈림길(대각선)에 들어가도 대각선 검사를 하지 않아서 갈림길로 들어서지 않았는데,
  백도로 이동후에 대각선 검사를 추가하였다.

- 보완할 점

1. 아직 백도 로직을 수정하지 못했다. 백도가 두번이상 일어날시 대처가 되지 않는다.
2. 말이 그려지는 좌표가 조금 엇나가있음 -> 마지막에 조금만 수정하면 되는 부분
3. 그룹으로 백도가 2번이상 실행되지 않음. -> 백도로직 수정에 포함될부분.

-보완할 점 정리후 다시 수정

1. 스택을 사용하여서 왔던길 모두를 기억하게 만들었다.
2. 백도로 되돌아가는 순간, 대각선 길로 돌아갈때, 현재 있는곳이 대각선인지 인지 못하는 경우가 존재한다. -> 어떻게 해야하는가?
 -> 특정 좌표에서 트리거처럼 대각선 이동의 유무가 켜지는게 아니라,
    모든 대각선 좌표에 들어가면 대각선으로 이동해야하는 로직을 추가함. 조금 지저분하지만 확실한 방법
3. 기존에 말이 출발했는지 getBeforelocation으로 판단하였는데, 스택과 boolean변수 start를 새로 만들어 재정의 했다.
   대신, 기존의 로직 부분에 수정이 많이 필요해서 start2라는 변수또한 만들어지는 일이 생겼다. 이 부분에 대해서 깔끔하게 정리해야한다.






