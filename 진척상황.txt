<22/02/02>

1. 윷을 던져 칸만큼 이동 구현
2. 특정 구간에 멈췄을시, 대각선으로 이동 구현

- 보완할 점

1. 좌 대각선으로 이동하다 중앙을 지나가면, 가는도중임에도 불구하고 우 대각선으로 방향을 틀음 (02.03 clear)
2. 도착점에 도착시 멈추기(끝내기) (정확히는 도착점에서 이동의 여유가 남아있으면 끝내기, 02.03 clear)
3. 백도 구현하기 (02.03 clear)
4. 윷을 던질때 윷 하나당 앞면, 뒷면의 확률을 구현하여서 결과를 내보기 (02.03 clear)


<22/02/03>

1. assertion을 활용하여 테스트 코드를 만들었다. 출력으로 확인하는것이 아닌 코드로 확인하게 만들었다.

2. 왼 대각선으로 내려가다가 말의 이동이 끝나기전에 오른 대각선으로 이동하는 문제를 해결하였다.
   오른 대각선으로 내려가는 경우는 말이 다 이동하고 멈췄을때이므로(독자적인 움직임), 새로운 for문안에 넣어주었다.

3. 윷의 값을 단순히 백도~모 중의 랜덤값이 아닌, 4개의 윷 각각을 굴려서 결과가 나오게 바꾸었다. 
   (Math.random() 메소드를 사용하여 0.5 밑으로는 엎어짐, 위로는 뒤집어짐)

4. ChangeMal이 실행되면 코드마지막에 mal의 boolean 변수 start를 true로 바꾸어 말이 판위에 올라와 이동했다는걸 분류했다.

5. mal class에 beforelocation 변수를 만들어 백도가 나오면 이전 위치로 되돌아 갈 수 있게 만들었다.   

6. beforelocation으로 start의 유무도 알 수 있기에 start를 삭제하였다.

7. 도착점에 도착했을때 count가 남아있으면 (이동할 수 있는 여유) 도착으로 치기로 했다. 
  이때 시작도 도착점에서 하기에 예외처리를 위하여 beforelocation이 null이 아닐시에만 도착으로 취급했다. 

- 보완할 점

1-1 . assertion으로 테스트 코드를 작성중 x,y 좌표를 검사하는데 isEqualto로 객체 비교가 안되었다.
      따라서 x값, y값을 각자 추출하여 작성하여 두줄로 작성이 되었다 -> 지저분 -> 클래스의 멤버내용도 한번에 비교할 순 없을까?

1-2. assertion으로 만든 테스트코드지만 너무 복잡하다, 일일히 좌표를 적지 않고 테스트를 진행할 순 없을까?

2. 처음에 백도가 나왔을시에 start를 true로 바꾸지않게 예외처리가 필요하다.

3. 말이동의 로직은 만들었으나 깔끔하지 않다 -> 직관적이고 일반화 어떻게 해야하는가?

- 추가할 점

1. 1명의 플레이어 내에서 2개 이상의 말을 컨트롤 하기
2. 말의 업기 기능
3. 여러명의 플레이어 플레이
4. 상대 플레이어의 말을 잡아보기

<22/02/04>

1. player 객체에 존재하던 mal을 없애고 ArrayList<Mal>을 추가해줌, 
  또한 player 생성자에 말의 개수를 입력받음으로써, 말의 개수를 가변적으로 생성해줌

2. 기존 test코드 삭제

3. WholeGame이라는 객체를 만들고 해당 객체가 게임을 시작함.

- 추가할 점

1. 게임 로직(진행)을 프로토 타입으로 만들어보기.
2. 이후에 업기 및 잡기 기능을 추가해보기.


<22/02/05>

1. 플레이어 수와 말의 개수를 입력받고 진행하는 StartGame 메소드를 WholeGame 객체안에 생성하고 로직을 만듬.

<22/02/06>

1. 업기 기능을 추가하였음.
2. 업혀있는 말은 int형 변수 group이라는 상태로 구분되며, 같은 숫자를 지니고있으면 업혀있는것이다.
3. 특정말이 이동하기전에 해당 플레이어의 다른말과 업혀있는지(동행하는지) 검사한다.
4. 2개 이상의 말이 해당 그룹에 해당하면 2개의 말 모두 이동한다.
5. 이동이 끝나면 그 위치에 해당플레이어의 다른 말이 있는지 검사하고 있다면 업는다. (PiggyBack 메소드)
6. static 변수로 새로 업을때마다 그룹값을 1씩 더해주고 할당해준다, 이로써 다른 플레이어 또는 다른 그룹과 엮이지 않게 구분한다.

7. 말이 도착할때 기존에는 업기 기능이 없었기에 플레이어의 말을 -1씩 해주는 방법이었는데, 
   업기기능을 추가한 후에는 얼마만큼이 업혀있는지 검사후에 그 수 만큼 제외하는 로직으로 변경하였다.

8. WholeGameLogicTestManual 이라는 Test를 만들어서 기존의 랜덤 윷 값이 아닌
    원하는 윷 값을 입력받을 수 있는 게임 테스트를 만들었다.


- 추가할 점

잡기 기능!
 · 이동후에 해당 위치에 다른 플레이어의 말이 존재하는지 확인한다.
 · 잡힌 말들을 그룹도 초기화되고 beforelocation도 null로 초기화 하고 출발하지 않은것으로 치부한다.
 · 도착은 하지 않았기에 해당 플레이어의 말을 늘릴필요는 없다.


